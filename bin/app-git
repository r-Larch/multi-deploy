#!/usr/bin/env bash
set -euo pipefail

# app-git <name> <action>
# Actions: status, pull, fetch, reset-hard, switch

INSTALL_DIR=${INSTALL_DIR:-/opt/multi-deploy}
APPS_DIR="${INSTALL_DIR}/apps"

# Require shared lib
# shellcheck disable=SC1091
source "$INSTALL_DIR/bin/lib-app" || { echo "Missing $INSTALL_DIR/bin/lib-app" >&2; exit 1; }

name=${1:-}
action=${2:-}
if [[ -z "$name" || -z "$action" ]]; then echo "Usage: $(basename "$0") <name> <status|pull|fetch|reset-hard|switch> [branch]" >&2; exit 1; fi

load_app "$name"
cd "$APP_REPO_DIR"

case "$action" in
  status)
    current_branch=$(git rev-parse --abbrev-ref HEAD || true)
    git fetch --all --prune >/dev/null 2>&1 || true
    # rev-list --left-right --count origin/branch...branch outputs: <behind> <ahead>
    counts=$(git rev-list --left-right --count "origin/${current_branch}...${current_branch}" 2>/dev/null || echo "0	0")
    behind=$(echo "$counts" | awk '{print $1}')
    ahead=$(echo "$counts" | awk '{print $2}')
    head=$(git rev-parse --short HEAD || true)
    echo "branch=${current_branch} commit=${head} ahead=${ahead:-0} behind=${behind:-0}"
    ;;
  fetch)
    git fetch --all --prune
    ;;
  pull)
    git fetch --all --prune
    current_branch=$(git rev-parse --abbrev-ref HEAD || true)
    git reset --hard "origin/${current_branch}"
    ;;
  reset-hard)
    current_branch=$(git rev-parse --abbrev-ref HEAD || true)
    git reset --hard "origin/${current_branch}"
    ;;
  switch)
    target_branch=${3:-}
    if [[ -z "$target_branch" ]]; then echo "Usage: $(basename "$0") $name switch <branch>" >&2; exit 1; fi
    git fetch --all --prune
    if git show-ref --verify --quiet "refs/remotes/origin/${target_branch}"; then
      git checkout -B "$target_branch" --track "origin/${target_branch}" || git checkout "$target_branch"
      git reset --hard "origin/${target_branch}" || true
    else
      echo "Branch '$target_branch' not found on origin" >&2; exit 2
    fi
    ;;
  *) echo "Unknown action: $action" >&2; exit 1 ;;
esac
